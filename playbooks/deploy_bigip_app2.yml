---
# Add CFT output variables to host from persisted results from previous playbooks
- hosts: bigips
  gather_facts: no
  vars_files:
   - [ "~/vars/f5aws/env/{{ env_name }}/{{ inventory_hostname }}.yml" ]
  tasks:
    - name: Add CFT output variables to host from persisted results from previous playbooks
      set_fact:
        ansible_ssh_host={{ hostvars[inventory_hostname].stack_outputs.ManagementInterfacePublicIp }}
        ManagementInterfacePublicIp={{ hostvars[inventory_hostname].stack_outputs.ManagementInterfacePublicIp }}
        ManagementInterfacePrivateIp={{ hostvars[inventory_hostname].stack_outputs.ManagementInterfacePrivateIp }}
        ExternalInterfacePublicIp={{ hostvars[inventory_hostname].stack_outputs.ExternalInterfacePublicIp }}
        ExternalInterfacePrivateIp={{ hostvars[inventory_hostname].stack_outputs.ExternalInterfacePrivateIp }}
        InternalInterfacePrivateIp={{ hostvars[inventory_hostname].stack_outputs.InternalInterfacePrivateIp }}
        VipAddress={{ hostvars[inventory_hostname].stack_outputs.Vip2 }}

- hosts: apphosts
  gather_facts: no
  vars_files:
   - [ "~/vars/f5aws/env/{{ env_name }}/{{ inventory_hostname }}.yml" ]
   - [ "~/vars/f5aws/env/{{ env_name }}/{{ inventory_hostname }}_docker_containers.yml" ]
  tasks:
    - name: Add CFT output variables to host from persisted results from previous playbooks
      set_fact:
        ansible_ssh_host={{ hostvars[inventory_hostname].stack_outputs.WebServerInstancePublicIp }}
        WebServerInstancePublicIp={{ hostvars[inventory_hostname].stack_outputs.WebServerInstancePublicIp }}
        WebServerInstancePrivateIp={{ hostvars[inventory_hostname].stack_outputs.WebServerInstancePrivateIp }}

# Now that topology and variables are finally loaded again
# Deploy App Stuff Here....
- hosts: apphosts
  gather_facts: no
  vars:
    vip_id: "Vip2"
  tasks:
    - name: Store pool members from containers into json
      local_action: template src=../roles/bigip_app/templates/bigip_pool_members_from_containers_test.cfg.j2 dest=~/vars/f5aws/env/{{ env_name }}/{{vip_id}}_pool_from_containers.json

     # Notes:
     # strip out last comma from jinja template output (see note below)
     # json.loads is more sensitive than our parser and need to strip out last "," at the end of the pool member list
     # no clean way to use loop.last directive in jinja template because it's a nested loop over all docker hosts
     # Could try a inline replacement
     # json_payload: "{{json_output|regex_replace(',]}', ']}' ) }}"
     # easier for now to modify in place with ansible replace command than jinja regex filter

    - replace: dest=~/vars/f5aws/env/{{ env_name }}/{{vip_id}}_pool_from_containers.json regexp=',]}' replace=']}'
      delegate_to: localhost

- hosts: bigips
  gather_facts: no
  vars:
    vip_id: "Vip2"

    # Ansible modules (lookup/cat/etc.) auto converts file contents that contain json format into python dicts 
    # so have to remove new lines and convert back to json ( with to_nice_json filter) so json modules don't fail 
    # ex. 
    # json/decoder.py", line 381, in raw_decode 
    background_image: "{{ lookup('file', install_path + '/roles/bigip_app/files/background_image_base_64') }}"
    sorry_image: "{{ lookup('file', install_path + '/roles/bigip_app/files/sorry_image_base_64') }}"
    sorry_page_rule: "{{ lookup('file', install_path + '/roles/bigip_app/files/__sorry_page_rule.tcl') }}"
    snat_random_rule: "{{ lookup('file', install_path + '/roles/bigip_app/files/__snat_random_rule.tcl') }}"
    demo_analytics_rule: "{{ lookup('file', install_path + '/roles/bigip_app/files/__demo_analytics_rule.tcl') }}"
    demo_iApp: "{{ lookup('file', install_path + '/roles/bigip_app/files/__demo_iApp.txt')|replace('\n','') }}"

  tasks:
    - name: Setup Webserver Pool
      delegate_to: localhost
      bigip_config:
          state=present
          host={{ ansible_ssh_host }}
          user={{ bigip_rest_user }}
          password={{ bigip_rest_password }}
          payload='{{lookup('file', '~/vars/f5aws/env/' + env_name + '/' + vip_id + '_pool_from_containers.json')}}'
          collection_path='mgmt/tm/ltm/pool'
          resource_key="name"

    - name: Setup a High Speed Logging pool to send to Analytics Server
      delegate_to: localhost
      bigip_config:
          state=present
          host={{ ansible_ssh_host }}
          user={{ bigip_rest_user }}
          password={{ bigip_rest_password }}
          collection_path='mgmt/tm/ltm/pool'
          resource_key="name"
          payload='{"name":"syslog_pool","members":[{"name":"10.0.3.32:514","address":"10.0.3.32"},{"name":"10.0.3.33:514","address":"10.0.3.33"}],"monitor":"tcp"}' 
    ##### UPLOAD DATAGROUP #####
    # TODO:
    # "Setting SSL Profiles"
    # "Setting Remote Logging Profiles"
 
    - name: Setup Analytics Profile
      delegate_to: localhost
      bigip_config:
          state=present
          host={{ ansible_ssh_host }}
          user={{ bigip_rest_user }}
          password={{ bigip_rest_password }}
          collection_path='mgmt/tm/ltm/profile/analytics'
          resource_key="name"
          payload='{"name":"demo_analytics_profile","capturedTrafficExternalLogging":"disabled","capturedTrafficInternalLogging":"disabled","collectGeo":"enabled","collectIp":"enabled","collectMaxTpsAndThroughput":"enabled","collectMethods":"enabled","collectPageLoadTime":"enabled","collectResponseCodes":"enabled","collectSubnets":"enabled","collectUrl":"enabled","collectUserAgent":"enabled","collectUserSessions":"enabled","collectedStatsExternalLogging":"disabled","collectedStatsInternalLogging":"enabled","defaultsFrom":"/Common/analytics","notificationByEmail":"disabled","notificationBySnmp":"disabled","notificationBySyslog":"disabled","partition":"Common","publishIruleStatistics":"disabled","sampling":"enabled","sessionCookieSecurity":"ssl-only","sessionTimeoutMinutes":"5"}'
      ignore_errors: True

#TODO: REST call for datagroup not idempotent
#ex.
#failed: [52.26.61.0 -> localhost] => {"failed": true, "name": "mgmt/tm/ltm/data-group/internal", "rc": 1}
#msg: 400 Client Error: Bad Request. {u'errorStack': [], u'message': u'"type" may not be specified in the context of the "modify" command. "type" may be specified using the following commands: create, edit, list', u'code': 400}
 
    - name: Upload Datagroup ... background for sorry page
      delegate_to: localhost
      bigip_config:
          state=present
          host={{ ansible_ssh_host }}
          user={{ bigip_rest_user }}
          password={{ bigip_rest_password }}
          collection_path='mgmt/tm/ltm/data-group/internal'
          resource_key="name"
          payload='{"name":"background_image","type":"string","records":[{"name":"{{background_image}}"}]}'
      ignore_errors: True

    - name: Upload Datagroup ... image for sorry page
      delegate_to: localhost
      bigip_config:
          state=present
          host={{ ansible_ssh_host }}
          user={{ bigip_rest_user }}
          password={{ bigip_rest_password }}
          collection_path='mgmt/tm/ltm/data-group/internal'
          resource_key="name"
          payload='{"name":"sorry_images","type":"string","records":[{"name":"{{sorry_image}}"}]}'
      ignore_errors: True
    
    ##### UPLOAD RULES #####
    - name: Upload iRules ... sorry_page_rule
      delegate_to: localhost
      bigip_config:
          state=present
          host={{ ansible_ssh_host }}
          user={{ bigip_rest_user }}
          password={{ bigip_rest_password }}
          collection_path='mgmt/tm/ltm/rule'
          resource_key="name"
          payload='{"name":"__sorry_page_rule","apiAnonymous":"{{sorry_page_rule|replace("\\","\\\\")|replace("\"","\\\"")|replace("\n","\\n")}}"}'
    
    - name: Upload iRules ... snat_random_rule
      delegate_to: localhost
      bigip_config:
          state=present
          host={{ ansible_ssh_host }}
          user={{ bigip_rest_user }}
          password={{ bigip_rest_password }}
          collection_path='mgmt/tm/ltm/rule'
          resource_key="name"
          payload='{"name":"__snat_random_rule","apiAnonymous":"{{snat_random_rule|replace("\\","\\\\")|replace("\"","\\\"")|replace("\n","\\n")}}"}'
          #payload='{"name":"__snat_random_rule","apiAnonymous":"{{lookup('file', install_path + '/roles/bigip_app/files/__snat_random_rule.tcl')|replace("\n","\\n")|replace("\"","\\\"")}}"}'
    
    - name: Upload iRules ... demo_analytics_rule
      delegate_to: localhost
      bigip_config:
          state=present
          host={{ ansible_ssh_host }}
          user={{ bigip_rest_user }}
          password={{ bigip_rest_password }}
          collection_path='mgmt/tm/ltm/rule'
          resource_key="name"
          payload='{"name":"__demo_analytics_rule","apiAnonymous":"{{demo_analytics_rule|replace("\\","\\\\")|replace("\"","\\\"")|replace("\n","\\n")}}"}'
    
    #Deploy VIPs
    - name: Setup the HTTP Virtual
      delegate_to: localhost
      bigip_config:
          state=present
          host={{ ansible_ssh_host }}
          user={{ bigip_rest_user }}
          password={{ bigip_rest_password }}
          collection_path='mgmt/tm/ltm/virtual'
          resource_key="name"
          payload='{"name":"{{vip_id}}","destination":"/Common/{{VipAddress}}:80","mask":"255.255.255.255","ipProtocol":"tcp","pool":"/Common/{{vip_id}}_pool","translateAddress":"enabled","translatePort":"enabled","sourceAddressTranslation":{"type":"automap"},"rules":["/Common/__snat_random_rule"], "profiles":[{"name":"http"},{"name":"tcp-wan-optimized","context":"clientside"},{"name":"tcp-lan-optimized","context":"serverside"}]}'

    - name: Setup the HTTPS Virtual
      delegate_to: localhost
      bigip_config:
          state=present
          host={{ ansible_ssh_host }}
          user={{ bigip_rest_user }}
          password={{ bigip_rest_password }}
          collection_path='mgmt/tm/ltm/virtual'
          resource_key="name"
          payload='{"name":"{{vip_id}}_SSL_Offload","destination":"/Common/{{VipAddress}}:443","mask":"255.255.255.255","ipProtocol":"tcp","pool":"/Common/{{vip_id}}_pool","translateAddress":"enabled","translatePort":"enabled","sourceAddressTranslation":{"type":"automap"},"rules":["/Common/__snat_random_rule"], "profiles":[{"name":"http"},{"name":"tcp-ssl-wan-optimized","context":"clientside"},{"name":"tcp-ssl-lan-optimized","context":"serverside"},{"name":"clientssl","context":"clientside"}]}'

#TODO: REST call for datagroup not idempotent
#ex.
#failed: [52.25.214.214 -> localhost] => {"failed": true, "name": "mgmt/tm/sys/application/service", "rc": 1}
#msg: 404 Client Error: Not Found. {u'errorStack': [], u'message': u'01020036:3: The requested Application Service (/Common/demo_iApp) was not found.', u'code': 404}

    - name: Setup the iApp
      delegate_to: localhost
      bigip_config:
          state=present
          host={{ ansible_ssh_host }}
          user={{ bigip_rest_user }}
          password={{ bigip_rest_password }}
          payload='{{demo_iApp|to_nice_json}}'
          collection_path='mgmt/tm/sys/application/service'
          resource_key="name"
      ignore_errors: true

# Finally attach an EIP to the Vip / Application
- hosts: bigips
  gather_facts: no
  vars:
     ansible_connection: local
     ansible_python_interpreter: "/usr/bin/env python"
     vip_id: "Vip2"
  #Grab Interface IDs and Secondary IPs from each BIGIP
  vars_files:
     - "~/vars/f5aws/env/{{ env_name }}/{{ inventory_hostname }}.yml"
  tasks:
    - name: deploy eips
      include: "{{ install_path }}/roles/infra/tasks/deploy_eip_cft.yml"
      delegate_to: localhost
