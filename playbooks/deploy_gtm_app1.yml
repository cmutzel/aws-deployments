---
# Add CFT output variables to host from persisted results from previous playbooks
- hosts: gtms
  gather_facts: no
  vars_files:
   - [ "~/vars/f5aws/env/{{ env_name }}/{{ inventory_hostname }}.yml" ]
  tasks:
    - name: Add CFT output variables to host from persisted results from previous playbooks
      set_fact:
        ansible_ssh_host={{ hostvars[inventory_hostname].stack_outputs.ManagementInterfacePublicIp }}
        ManagementInterfacePublicIp={{ hostvars[inventory_hostname].stack_outputs.ManagementInterfacePublicIp }}
        ManagementInterfacePrivateIp={{ hostvars[inventory_hostname].stack_outputs.ManagementInterfacePrivateIp }}
        ExternalInterfacePublicIp={{ hostvars[inventory_hostname].stack_outputs.ExternalInterfacePublicIp }}
        ExternalInterfacePrivateIp={{ hostvars[inventory_hostname].stack_outputs.ExternalInterfacePrivateIp }}
        VipAddress={{ hostvars[inventory_hostname].stack_outputs.Vip1 }}
        region="{{region}}"

- hosts: bigips
  gather_facts: no
  vars_files:
   - [ "~/vars/f5aws/env/{{ env_name }}/{{ inventory_hostname }}.yml" ]
  tasks:
    - name: Add CFT output variables to host from persisted results from previous playbooks
      set_fact:
        ansible_ssh_host={{ hostvars[inventory_hostname].stack_outputs.ManagementInterfacePublicIp }}
        ManagementInterfacePublicIp={{ hostvars[inventory_hostname].stack_outputs.ManagementInterfacePublicIp }}
        ManagementInterfacePrivateIp={{ hostvars[inventory_hostname].stack_outputs.ManagementInterfacePrivateIp }}
        ExternalInterfacePublicIp={{ hostvars[inventory_hostname].stack_outputs.ExternalInterfacePublicIp }}
        ExternalInterfacePrivateIp={{ hostvars[inventory_hostname].stack_outputs.ExternalInterfacePrivateIp }}
        InternalInterfacePrivateIp={{ hostvars[inventory_hostname].stack_outputs.InternalInterfacePrivateIp }}
        AvailabilityZone={{ hostvars[inventory_hostname].stack_outputs.AvailabilityZone }}


- hosts: bigips
  gather_facts: no
  vars_files:
   - [ "~/vars/f5aws/env/{{ env_name }}/{{ inventory_hostname }}-vip-Vip1.yml" ]
  tasks:
    - name: Gather EIPs for VIP1
      set_fact:
        VipPrivateIp={{ hostvars[inventory_hostname].stack_outputs.privateIpAddress }} 
        VipEip={{ hostvars[inventory_hostname].stack_outputs.eipAddress }} 

# 
# - hosts: bigips
#   gather_facts: no
#   tasks:
# 
#     - name: Gather EIPs for VIP1
#       shell: "cat ~/vars/f5aws/env/{{ env_name }}/{{ item.1 }}-vip-Vip1.json"
#       register: output
#       with_indexed_items: groups['bigip-managers']
#       when: inventory_hostname == groups['bigips'][item.0] 
#       delegate_to: localhost

- hosts: gtms
  gather_facts: no
  vars:
    vip_id: "Vip1"
  tasks:
    - name: Setup the Virtual Servers
      delegate_to: localhost
      bigip_config:
          state=present
          host={{ ansible_ssh_host }}
          user={{ bigip_rest_user }}
          password={{ bigip_rest_password }}
          payload='{"name":"{{vip_id}}","destination":"{{hostvars[item]["VipEip"]}}:80","translationAddress":"{{hostvars[item]["VipPrivateIp"]}}"}'
          collection_path='mgmt/tm/gtm/server/~Common~ip-{{hostvars[item]["ManagementInterfacePrivateIp"]|replace(".","-")}}.ec2.internal/virtual-servers'
          resource_key="name"
      with_items: groups['bigips']
 
    - name: Setup the AZ pools
      delegate_to: localhost
      bigip_config:
          state=present
          host={{ ansible_ssh_host }}
          user={{ bigip_rest_user }}
          password={{ bigip_rest_password }}
          payload='{"name":"{{vip_id}}_pool_{{hostvars[item]["AvailabilityZone"]}}","loadBalancingMode":"round-robin","members":[{"name":"ip-{{hostvars[item]["ManagementInterfacePrivateIp"]|replace(".","-")}}.ec2.internal:{{vip_id}}"}]}'
          collection_path='mgmt/tm/gtm/pool'
          resource_key="name"
      with_items: groups['bigips']

    #Difficult to selectively grab variables for various hosts and string together in play framework. Easiest way is through a template.
    - name: Store create wideip pool string from jinja 2 template
      template: src=../roles/gtm_conf/templates/wideip_pool.cfg.j2 dest=~/vars/f5aws/env/{{ env_name }}/{{vip_id}}_wideip_pool_string.json
      delegate_to: localhost

    - shell: "cat ~/vars/f5aws/env/{{ env_name }}/{{vip_id}}_wideip_pool_string.json"
      register: wideip_pool_string
      delegate_to: localhost

    - name: Setup the Wideip
      delegate_to: localhost
      bigip_config:
          state=present
          host={{ ansible_ssh_host }}
          user={{ bigip_rest_user }}
          password={{ bigip_rest_password }}
          payload='{"name":"{{vip_id}}.example.com","poolLbMode":"topology","ipv6NoErrorResponse":"enabled","pools":[{{wideip_pool_string.stdout}}]}'
          collection_path='mgmt/tm/gtm/wideip'
          resource_key="name"


