#!/usr/bin/python

DOCUMENTATION = '''
---
module: bigip_license
short_description: Manage license installation and activation on BIG-IP devices
description:
   - Manage license installation and activation on BIG-IP devices
version_added: "1.8"
options:
  username:
    connection:
      - The connection used to license the BIG-IP
    required: false
    default: auto
    choices: [ "ssh", "icontrol", "auto" ]
  dossier_file:
    description:
      - Path to file containing kernel dossier for your system
    required: false
  hostname:
    description:
      - BIG-IP host to connect to
    required: true
  key:
    description:
      - The registration key to use to license the BIG-IP
    required: true
  license_file:
    description:
      - Path to file containing the license to use
    required: false
  license_options:
    description:
      - Dictionary of options to use when creating the license
    required: false
  license_server:
    description:
      - The license server to connect to to license the BIG-IP
    required: false
    default: activate.f5.com
    choices: [ "activate.f5.com", "authem.f5net.com" ]
  password:
    description:
      - The password of the user used to authenticate to the BIG-IP
    required: true
    default: admin
  ssh_keyfile:
    description:
      - The SSH key file to use if using connection=ssh
    required: false
    default: ~/.ssh/id_rsa
  state:
    description:
      - The state of the license on the system. When C(present), only guarantees
        that a license is there. When C(latest) ensures that the license is always
        valid. C(latest) is most useful internally.
    required: false
    default: present
    choices: [ "present", "latest" ]
  wsdl:
    description:
      - WSDL file to use if you're receiving errors when downloading the WSDL
        file at run-time from the licensing servers
    required: false
    default: None
  username:
    description:
      - The username used when connecting to the BIG-IP
    required: false
    default: admin

notes:
   - Requires the suds Python package on the host. This is as easy as pip
     install suds

   - Requires the bigsuds Python package on the host. This is as easy as
     pip install bigsuds

requirements: [ "bigsuds", "suds" ]
author: Tim Rupp <t.rupp@f5.com>
'''

EXAMPLES = """
- name: License a BIG-IP using iControl interface as a local_action
  local_action:
      module: bigip_license
      connection: icontrol
      hostname: big-ip
      key: XXXXX-XXXXX-XXXXX-XXXXX-XXXXXXX

- name: License BIG-IP using iControl delegated to localhost
  bigip_license: connection=icontrol
                 hostname=big-ip
                 key=XXXXX-XXXXX-XXXXX-XXXXX-XXXXXXX
  delegate_to: localhost

- name: License BIG-IP using iControl specifying license options
  bigip_license:
      connection: icontrol
      hostname: big-ip
      key: XXXXX-XXXXX-XXXXX-XXXXX-XXXXXXX
      license_options:
          email: 'joe.user@myplace.com'
          firstname: 'Joe'
          lastname: 'User'
          company: 'My Place'
          phone: '630-555-1212'
          jobtitle: 'Systems Administrator'
          address: '207 N Rodeo Dr'
          city: 'Beverly Hills'
          state: 'CA'
          postalcode: '90210'
          country: 'US'
"""

import sys
sys.path.append("/Users/applebaum/Downloads/bigsuds-1.0/bigsuds-1.0.1/build/lib/")
import re
import os
import tempfile
import base64
import suds
import socket

from xml.sax._exceptions import SAXParseException

try:
    import bigsuds
except ImportError:
    bigsuds_found = False
else:
    bigsuds_found = True

def test_icontrol(username, password, hostname):
    client = bigsuds.BIGIP(
        hostname=hostname,
        username=username,
        password=password,
        debug=True
    )

    try:
        response = client.Management.LicenseAdministration.get_license_activation_status()
        if 'STATE' in response:
            return True
        else:
            return False
    except:
        return False

def test_license_server(server, wsdl=None):
    if wsdl:
        url = 'file://%s' % wsdl
    else:
        url = 'https://%s/license/services/urn:com.f5.license.v5b.ActivationService?wsdl' % server

    try:
        client = suds.client.Client(url=url)
    except SAXParseException:
        return False

    result = client.service.ping()
    if result:
        return True
    else:
        return False


class BigIpLicenseCommon(object):
    def __init__(self, regkey, username, password, hostname):
        self.eula_file = 'LICENSE.F5'
        self.license = None
        self.dossier = None
        self.regkey = regkey
        self.ssh_options = [
            '-o', 'PasswordAuthentication=no',
            '-o', 'StrictHostKeyChecking=no',
            '-o', 'UserKnownHostsFile=/dev/null',
            '-o', 'GlobalKnownHostsFile=/dev/null',
            '-o', 'LogLevel=quiet', '-q'
        ]
        self.username = username
        self.password = password
        self.hostname = hostname
        self.license_options = {
            'eula': '',
            'email': '',
            'firstname': '',
            'lastname': '',
            'company': '',
            'phone': '',
            'jobtitle': '',
            'address': '',
            'city': '',
            'state': '',
            'postalcode': '',
            'country': ''
        }
        self.license_server = None

        # Check if we can connect to the device
        sock = socket.create_connection((hostname,443), 10)
        sock.close()

        self.client = bigsuds.BIGIP(
            hostname=self.hostname,
            username=self.username,
            password=self.password,
            debug=True
        )

    def get_license(self, wsdl=None):
        if wsdl:
            url = 'file://%s' % wsdl
        else:
            url = 'https://%s/license/services/urn:com.f5.license.v5b.ActivationService?wsdl' % self.server_server

        client = suds.client.Client(url=url)

        resp = client.service.getLicense(
            self.dossier,
            self.license_options['eula'],
            self.license_options['email'],
            self.license_options['firstname'],
            self.license_options['lastname'],
            self.license_options['company'],
            self.license_options['phone'],
            self.license_options['jobtitle'],
            self.license_options['address'],
            self.license_options['city'],
            self.license_options['state'],
            self.license_options['postalcode'],
            self.license_options['country'],
        )

        return resp

    def get_license_activation_status(self):
        '''Returns the license status

        This method will return the license activation status of a BIG-IP. The
        following status may be returned from this method.

            STATE_DISABLED when it is not licensed
            STATE_ENABLED when it is licensed
        '''

        response = self.client.Management.LicenseAdministration.get_license_activation_status()
        return response


class BigIpLicenseSsh(BigIpLicenseCommon):
    def get_dossier(self, key):
        dossier_lines = _ssh_command("get_dossier -b key")
        dossier = ''.join(dossier_lines)
        self.dossier = dossier

    def _ssh_command(self, command):
        command = "${ssh_cmd_prefix}${command}${ssh_cmd_suffix}"
        #lines = `$ssh_executable -l $USER $ssh_options $HOST "$command" 2>&1`
        #lines = ("SSH error occurred")
        # if ($? == 255)

        return lines[0].strip()

    def _scp_data(self, data, dest_file):
        tmp_file = self._write_temp_file(data)

        status = system("scp $ssh_options $tmp_file $USER\@$HOST:$dest_file")
        #unlink($tmp_file)
        #return ($status eq 0) ? 1 : 0

    def _write_temp_file(self, data):
        tmp = tempfile.mkstemp()
        fh = open(tmp)
        fh.write(data)
        fh.close()

        return tmp

    def install_license(self, license):
        resp = self._scp_data(license, '/config/bigip.license')
        if not resp:
            raise Exception('Could not SCP license to device')

        resp = self._ssh_command("reloadlic")
        if not resp:
            raise Exception('Could not reload the license on the device')

    def upload_eula(self, eula):
        self._scp_data(eula, "/LICENSE.F5")
        if not resp:
            raise Exception('Could not SCP EULA to device')


class BigIpLicenseIControl(BigIpLicenseCommon):
    def get_dossier(self, key):
        response = self.client.Management.LicenseAdministration.get_system_dossier(
            registration_keys=[key]
        )
        self.dossier = response
        return response

    def install_license(self, license):
        license = base64.b64encode(license)
        response = self.client.Management.LicenseAdministration.install_license(
            license_file_data=license
        )

        status = self.get_license_activation_status()
        if status == 'STATE_ENABLED':
            return True
        else:
            return False

    def upload_eula(self, eula):
        file_name = '/%s' % self.eula_file

        response = self.client.System.ConfigSync.upload_file(
            file_name = file_name,
            file_context = {
                'file_data': base64.b64encode(eula),
                'chain_type': 'FILE_FIRST_AND_LAST'
            }
        )


def main():
    changed = False

    module = AnsibleModule(
        argument_spec = dict(
            connection=dict(default='auto', choices=['ssh', 'icontrol', 'auto']),
            dossier_file=dict(),
            hostname=dict(required=True),
            key=dict(required=True),
            license_file=dict(),
            license_options=dict(type='dict'),
            license_server=dict(default='activate.f5.com', choices=['activate.f5.com', 'authem.f5net.com']),
            password=dict(default='admin'),
            ssh_keyfile=dict(default='~/.ssh/id_rsa'),
            state=dict(default='present', choices=['present', 'latest']),
            username=dict(default='admin'),
            wsdl=dict(default=None)
        )
    )

    connection = module.params.get('connection')
    dossier_file = module.params.get('dossier_file')
    hostname = module.params.get('hostname')
    key = module.params.get('key')
    license_file = module.params.get('license_file')
    license_options = module.params.get('license_options')
    license_server = module.params.get('license_server')
    password = module.params.get('password')
    ssh_keyfile = module.params.get('ssh_keyfile')
    username = module.params.get('username')
    state = module.params.get('state')
    wsdl = module.params.get('wsdl')

    try:
        if not bigsuds_found:
            raise Exception("The python bigsuds module is required")

        if connection == 'auto':
            icontrol = test_icontrol(username, password, hostname)
            if icontrol:
                connection = 'icontrol'
            else:
                connection = 'ssh'

        if connection == 'ssh':
            obj = BigIpLicenseSsh(key, username, password, hostname)
        elif connection == 'icontrol':
            obj = BigIpLicenseIControl(key, username, password, hostname)

        if license_options:
            tmp = dict(obj.license_options.items() + license_options.items())
            obj.license_options = tmp

        obj.license_server = license_server
        obj.ssh_options += ['-i', ssh_keyfile]

        if license_file:
            fh = open(license_file)
            obj.license = fh.read()
            fh.close()

        if dossier_file:
            fh = open(dossier_file)
            obj.dossier = fh.read()
            fh.close()

        if state == "present":
            lic_status = obj.get_license_activation_status()
            if lic_status == 'STATE_ENABLED':
                module.exit_json(changed=False)

            lic_server = test_license_server(license_server, wsdl)
            if not lic_server and lic_status == 'STATE_DISABLED':
                module.fail_json(changed=False, msg="Could not reach the specified activation server to license BIG-IP")

            if not obj.dossier:
                obj.get_dossier(key)
                if not obj.dossier:
                    raise Exception('Dossier not generated')

            resp = obj.get_license(wsdl)

            if resp.state == "EULA_REQUIRED":
                #Extract the eula offered from first try
                eula_string = resp.eula
                obj.license_options['eula'] = eula_string
                resp = obj.get_license(wsdl)

            #Try again, this time with eula populated
            if resp.state == 'LICENSE_RETURNED':
                big_license = resp.license
                if license:
                    if obj.upload_eula(resp.eula):
                        result_eula = True
                    else:
                        result_eula = False
            else:
                module.fail_json(msg=resp.fault.faultText)

            if obj.install_license(big_license):
                changed = True
            else:
                module.fail_json(msg="License not installed")
    except bigsuds.ConnectionError, e:
        module.fail_json(msg="Could not connect to BIG-IP host %s" % hostname)
    except socket.timeout, e:
        module.fail_json(msg="Timed out connecting to the BIG-IP")
#    except Exception, e:
#        module.fail_json(msg=str(e))

    module.exit_json(changed=changed)

from ansible.module_utils.basic import *
main()

